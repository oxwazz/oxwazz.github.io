---
import type { SiteMeta } from "@/types";
import { siteConfig } from "@/site-config";
import "@shikijs/twoslash/style-rich.css";
import "../styles/global.css";
import "../styles/twoslash.css";

type Props = SiteMeta;

const { title, description, ogImage, articleDate } = Astro.props;

const titleSeparator = "â€¢";
const siteTitle = `${title} ${titleSeparator} ${siteConfig.title}`;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(ogImage ? ogImage : "/social-card.png", Astro.url).href;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<title>{siteTitle}</title>

<!-- Icons / Favicon -->
<link rel="icon" href="/favicon.ico" sizes="any" />
<link rel="icon" href="/icon.svg" type="image/svg+xml" />
<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
<link rel="manifest" href="/manifest.webmanifest" />
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<meta name="title" content={siteTitle} />
<meta name="description" content={description} />
<meta name="author" content={siteConfig.author} />

<!-- Theme Colour -->
<meta name="theme-color" content="" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={articleDate ? "article" : "website"} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:site_name" content={siteConfig.title} />
<meta property="og:locale" content={siteConfig.ogLocale} />
<meta property="og:image" content={socialImageURL} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
{
	articleDate && (
		<>
			<meta property="article:author" content={siteConfig.author} />
			<meta property="article:published_time" content={articleDate} />
		</>
	)
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialImageURL} />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- RSS auto-discovery -->
<link rel="alternate" type="application/rss+xml" title={siteConfig.title} href="/rss.xml" />

<!-- Font -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
	rel="stylesheet"
/>

<!-- Giscus -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		function getGiscusTheme() {
			const bodyThemeIsDark = document.documentElement.classList.contains("dark");
			return bodyThemeIsDark ? "dark" : "light";
		}

		function setGiscusTheme() {
			function sendMessage(message) {
				const iframe = document.querySelector("iframe.giscus-frame");
				if (!iframe) return;
				iframe.contentWindow.postMessage({ giscus: message }, "https://giscus.app");
			}
			sendMessage({
				setConfig: {
					theme: getGiscusTheme(),
				},
			});
		}

		const giscusAttributes = {
			src: "https://giscus.app/client.js",
			"data-repo": "oxwazz/oxwazz.github.io",
			"data-repo-id": "R_kgDOKOXRsQ",
			"data-category": "Announcements",
			"data-category-id": "DIC_kwDOKOXRsc4CeZDU",
			"data-mapping": "pathname",
			"data-strict": "0",
			"data-reactions-enabled": "1",
			"data-emit-metadata": "0",
			"data-input-position": "top",
			"data-theme": getGiscusTheme(),
			"data-lang": "en",
			"data-loading": "lazy",
			crossorigin: "anonymous",
			async: "",
		};

		// Dynamically create script tag
		const giscusScript = document.createElement("script");
		Object.entries(giscusAttributes).forEach(([key, value]) =>
			giscusScript.setAttribute(key, value),
		);
		document.querySelector("head").appendChild(giscusScript);

		// Update giscus theme when theme switcher is clicked
		const toggle = document.querySelector("theme-toggle");
		if (toggle) {
			toggle.addEventListener("click", setGiscusTheme);
		}
	});
</script>
