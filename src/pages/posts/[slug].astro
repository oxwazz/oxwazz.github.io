---
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import PostLayout from "@/layouts/BlogPost";
import { getAllPosts } from "@/utils";
import Heading2 from "@/components/custom-mdx/Heading-2";
import Heading3 from "@/components/custom-mdx/Heading-3";
import Image from "@/components/custom-mdx/Image";
import Heading4 from "@/components/custom-mdx/Heading-4";
import Heading5 from "@/components/custom-mdx/Heading-5";
import Heading6 from "@/components/custom-mdx/Heading-6";
import Heading1 from "@/components/custom-mdx/Heading-1";

export const getStaticPaths = (async () => {
	const blogEntries = await getAllPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<script is:inline src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<!-- viewerjs - start -->
<script
	src="https://cdnjs.cloudflare.com/ajax/libs/viewerjs/1.11.6/viewer.min.js"
	integrity="sha512-EC3CQ+2OkM+ZKsM1dbFAB6OGEPKRxi6EDRnZW9ys8LghQRAq6cXPUgXCCujmDrXdodGXX9bqaaCRtwj4h4wgSQ=="
	crossorigin="anonymous"
	referrerpolicy="no-referrer"></script>
<link
	rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/imageviewer/1.1.0/viewer.min.css"
	integrity="sha512-TzUPhuLv6gjoqejLOagZG1XHJerWp5Gbnyl/k7/yXp4Es/10AgsE2cn/SPvT6d2t0qNrGxY/W5zqoeH/JPQXFQ=="
	crossorigin="anonymous"
	referrerpolicy="no-referrer"
/>
<!-- viewerjs - end -->

<PostLayout post={entry}>
	<div id="viewerjs-images">
		<Content
			components={{
				h1: Heading1,
				h2: Heading2,
				h3: Heading3,
				h4: Heading4,
				h5: Heading5,
				h6: Heading6,
				img: Image,
			}}
		/>
	</div>
</PostLayout>

<script type="module">
	import {
		computePosition,
		flip,
		shift,
		offset,
		arrow,
		autoUpdate,
	} from "https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.6.3/+esm";

	new window.Viewer(document.getElementById("viewerjs-images"));

	function update(button, tooltip) {
		computePosition(button, tooltip, {
			placement: "bottom-start",
			middleware: [flip(), shift({ padding: 10 }), offset()],
		}).then(({ x, y, placement }) => {
			const calcTop = placement.startsWith("top") ? y - 20 : y - 15;
			Object.assign(tooltip.style, {
				left: `${x}px`,
				top: `${calcTop}px`,
			});
		});
	}

	function showTooltip(button, tooltip) {
		tooltip.style.cssText = `display:inline-flex !important;
      max-width: 100vw !important;
      white-space: pre-wrap !important;
      margin-right: 10px;`;
		update(button, tooltip);
	}

	$(document).ready(function () {
		let cleanup = null;
		$(".twoslash-hover:not(.twoslash-query-presisted)").hover(
			function (e) {
				$.when(
					$(e.target).addClass("activezz").children(".twoslash-popup-container").addClass("openzz"),
				).done(function (e) {
					const button = e?.prevObject?.[0];
					const tooltip = e?.[0];
					// Start auto updates.
					if (button && tooltip) {
						cleanup = autoUpdate(button, tooltip, () => showTooltip(button, tooltip));
					}
				});
			},
			function (e) {
				$.when(
					$(".twoslash-hover.activezz")
						.removeClass("activezz")
						.children(".twoslash-popup-container")
						.removeClass("openzz"),
				).done(function (e) {
					// Stop auto updates.
					if (cleanup) {
						cleanup();
						cleanup = null;
					}
				});
			},
		);
	});
</script>
